#!/usr/bin/env python3
#
# Modified and adapted from the original at https://github.com/vivien/i3blocks
# Copyright (C) 2024 Ludovico Deponte <ludovico.deponte@proton.me>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from subprocess import check_output, run
from time import sleep
import os
import re

config = dict(os.environ)
status = check_output(['acpi'], universal_newlines=True)

if not status:
    # stands for no battery found
    color = config.get("signal_crit", "red")
    fulltext = "<span color='{}'><span font='FontAwesome'>\uf00d \uf240</span></span>".format(color)
    percentleft = 100
else:
    # if there is more than one battery in one laptop, the percentage left is
    # available for each battery separately, although state and remaining
    # time for overall block is shown in the status of the first battery
    batteries = status.split("\n")
    state_batteries=[]
    commasplitstatus_batteries=[]
    percentleft_batteries=[]
    time = ""
    for battery in batteries:
        if battery!='':
            state_batteries.append(battery.split(": ")[1].split(", ")[0])
            commasplitstatus = battery.split(", ")
            if not time:
                time = commasplitstatus[-1].strip()
                # check if it matches a time
                time = re.match(r"(\d+):(\d+)", time)
                if time:
                    time = ":".join(time.groups())
                    timeleft = " ({})".format(time)
                else:
                    timeleft = ""

            p = int(commasplitstatus[1].rstrip("%\n"))
            if p>0:
                percentleft_batteries.append(p)
            commasplitstatus_batteries.append(commasplitstatus)
    state = state_batteries[0]
    commasplitstatus = commasplitstatus_batteries[0]
    if percentleft_batteries:
        percentleft = int(sum(percentleft_batteries)/len(percentleft_batteries))
    else:
        percentleft = 0

    # stands for charging
    FA_LIGHTNING = "<span color='{}'><span font='FontAwesome'>\uf0e7</span></span>" #.format(color)

    # stands for plugged in
    FA_PLUG = "<span color='{}'><span font='FontAwesome'>\uf1e6</span></span>"

    # stands for using battery
    FA_BATTERY = "<span color='{}'><span font='FontAwesome'>\uf240</span></span>"

    # stands for unknown status of battery
    FA_QUESTION = "</span><span font='FontAwesome'>\uf128</span></span>"

    # stands for full battery
    FA_FULL = "<span color='{}'><span font='FontAwesome'>\uf240</span></span>" #.format(color)

    # note that there is no color_NN at system level, so the others defined here will be used
    def color(percent):
        if percent < 10:
            # exit code 33 will turn background red
            return config.get("signal_crit", "#FFFFFF")
        if percent < 30:
            return config.get("signal_warn", "##FF6600")
        if percent < 40:
            return config.get("signal_mild", "#FF9900")
        if percent < 50:
            return config.get("signal_mild", "#FFCC00")
        if percent < 60:
            return config.get("signal_defa", "##FFFF00")
        if percent < 70:
            return config.get("signal_defa", "#FFFF33")
        if percent < 80:
            return config.get("signal_defa", "#FFFF66")
        return config.get("signal_defa", "#FFFFFF")

    if state == "Discharging":
        fulltext = FA_BATTERY.format(color(percentleft)) + " "
    elif state == "Unknown":
        fulltext = FA_QUESTION + " " + FA_BATTERY.format(color(percentleft)) + " "
        timeleft = ""
    else:
        fulltext = FA_PLUG.format(color(percentleft)) + " "


    form =  "<span color='{}'>{}%</span>"
    fulltext += form.format(color(percentleft), percentleft)
    fulltext += timeleft

print(fulltext)
print(fulltext)
if percentleft < 10 and state == "Discharging":
    run("xrandr --output LVDS-1 --brightness 0.2", shell = True, executable="/bin/bash")
    sleep(5)
    run("xrandr --output LVDS-1 --brightness 1.0", shell = True, executable="/bin/bash")
    exit(33)
