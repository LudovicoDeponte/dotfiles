#!/usr/bin/env perl
#
# Modified and adapted from the original at https://github.com/vivien/i3blocks
# Copyright (C) 2024 Ludovico Deponte <ludovico.deponte@proton.me>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use utf8;
use Getopt::Long;

# default values
my $t_mild = $ENV{T_MILD} // 50;
my $t_warn = $ENV{T_WARN} // 80;
my $t_crit = $ENV{T_CRIT} // 90;
my $cpu_usage = -1;
my $decimals = $ENV{DECIMALS} // 2;
my $label = $ENV{LABEL} // "";
my $color_normal = $ENV{signal_defa} // "#ffffff";
my $color_mild = $ENV{signal_mild} // "#ffffff";
my $color_warn = $ENV{signal_warn} // "#ffffff";
my $color_crit = $ENV{signal_crit} // "#ffffff";

sub help {
    print "Usage: cpu_usage [-w <warning>] [-c <critical>] [-d <decimals>]\n";
    print "-m <percent>: mild threshold to become yellow\n";
    print "-w <percent>: warning threshold to become orange\n";
    print "-c <percent>: critical threshold to become red\n";
    print "-d <decimals>:  Use <decimals> decimals for percentage (default is $decimals) \n"; 
    exit 0;
}

GetOptions("help|h" => \&help,
	   "m=i"    => \$t_mild,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit,
           "d=i"    => \$decimals,
);

# Get CPU usage
$ENV{LC_ALL}="en_US"; # if mpstat is not run under en_US locale, things may break, so make sure it is
open (MPSTAT, 'mpstat 1 1 |') or die;
while (<MPSTAT>) {
    if (/^.*\s+(\d+\.\d+)[\s\x00]?$/) {
        $cpu_usage = 100 - $1; # 100% - %idle
        last;
    }
}
close(MPSTAT);

$cpu_usage eq -1 and die 'Can\'t find CPU information';

# Print short_text, full_text
print "${label}";
printf "%.${decimals}f%%\n", $cpu_usage;
print "${label}";
printf "%.${decimals}f%%\n", $cpu_usage;

# Print color, if needed
if ($cpu_usage >= $t_crit) {
    print "${color_crit}\n";
} elsif ($cpu_usage >= $t_warn) {
    print "${color_warn}\n";
} elsif ($cpu_usage >= $t_mild) {
    print "${color_mild}\n";
} else {
    print "${color_normal}\n";
}

exit 0;
